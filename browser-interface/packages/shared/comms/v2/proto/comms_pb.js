// source: comms.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ChatData', null, global);
goog.exportSymbol('proto.CommsMessage', null, global);
goog.exportSymbol('proto.CommsMessage.DataCase', null, global);
goog.exportSymbol('proto.PositionData', null, global);
goog.exportSymbol('proto.ProfileData', null, global);
goog.exportSymbol('proto.ProfileData.ProfileType', null, global);
goog.exportSymbol('proto.ProfileRequestData', null, global);
goog.exportSymbol('proto.ProfileResponseData', null, global);
goog.exportSymbol('proto.SceneData', null, global);
goog.exportSymbol('proto.VoiceData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CommsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CommsMessage.oneofGroups_);
};
goog.inherits(proto.CommsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CommsMessage.displayName = 'proto.CommsMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PositionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PositionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PositionData.displayName = 'proto.PositionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProfileData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProfileData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProfileData.displayName = 'proto.ProfileData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProfileRequestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProfileRequestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProfileRequestData.displayName = 'proto.ProfileRequestData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProfileResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProfileResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProfileResponseData.displayName = 'proto.ProfileResponseData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatData.displayName = 'proto.ChatData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SceneData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SceneData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SceneData.displayName = 'proto.SceneData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VoiceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VoiceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VoiceData.displayName = 'proto.VoiceData';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CommsMessage.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.CommsMessage.DataCase = {
  DATA_NOT_SET: 0,
  POSITION_DATA: 2,
  PROFILE_DATA: 3,
  CHAT_DATA: 4,
  SCENE_DATA: 5,
  VOICE_DATA: 6,
  PROFILE_REQUEST_DATA: 7,
  PROFILE_RESPONSE_DATA: 8
};

/**
 * @return {proto.CommsMessage.DataCase}
 */
proto.CommsMessage.prototype.getDataCase = function() {
  return /** @type {proto.CommsMessage.DataCase} */(jspb.Message.computeOneofCase(this, proto.CommsMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CommsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.CommsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CommsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    positionData: (f = msg.getPositionData()) && proto.PositionData.toObject(includeInstance, f),
    profileData: (f = msg.getProfileData()) && proto.ProfileData.toObject(includeInstance, f),
    chatData: (f = msg.getChatData()) && proto.ChatData.toObject(includeInstance, f),
    sceneData: (f = msg.getSceneData()) && proto.SceneData.toObject(includeInstance, f),
    voiceData: (f = msg.getVoiceData()) && proto.VoiceData.toObject(includeInstance, f),
    profileRequestData: (f = msg.getProfileRequestData()) && proto.ProfileRequestData.toObject(includeInstance, f),
    profileResponseData: (f = msg.getProfileResponseData()) && proto.ProfileResponseData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CommsMessage}
 */
proto.CommsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CommsMessage;
  return proto.CommsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CommsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CommsMessage}
 */
proto.CommsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.PositionData;
      reader.readMessage(value,proto.PositionData.deserializeBinaryFromReader);
      msg.setPositionData(value);
      break;
    case 3:
      var value = new proto.ProfileData;
      reader.readMessage(value,proto.ProfileData.deserializeBinaryFromReader);
      msg.setProfileData(value);
      break;
    case 4:
      var value = new proto.ChatData;
      reader.readMessage(value,proto.ChatData.deserializeBinaryFromReader);
      msg.setChatData(value);
      break;
    case 5:
      var value = new proto.SceneData;
      reader.readMessage(value,proto.SceneData.deserializeBinaryFromReader);
      msg.setSceneData(value);
      break;
    case 6:
      var value = new proto.VoiceData;
      reader.readMessage(value,proto.VoiceData.deserializeBinaryFromReader);
      msg.setVoiceData(value);
      break;
    case 7:
      var value = new proto.ProfileRequestData;
      reader.readMessage(value,proto.ProfileRequestData.deserializeBinaryFromReader);
      msg.setProfileRequestData(value);
      break;
    case 8:
      var value = new proto.ProfileResponseData;
      reader.readMessage(value,proto.ProfileResponseData.deserializeBinaryFromReader);
      msg.setProfileResponseData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CommsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CommsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CommsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPositionData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PositionData.serializeBinaryToWriter
    );
  }
  f = message.getProfileData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ProfileData.serializeBinaryToWriter
    );
  }
  f = message.getChatData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ChatData.serializeBinaryToWriter
    );
  }
  f = message.getSceneData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SceneData.serializeBinaryToWriter
    );
  }
  f = message.getVoiceData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.VoiceData.serializeBinaryToWriter
    );
  }
  f = message.getProfileRequestData();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ProfileRequestData.serializeBinaryToWriter
    );
  }
  f = message.getProfileResponseData();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ProfileResponseData.serializeBinaryToWriter
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.CommsMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional PositionData position_data = 2;
 * @return {?proto.PositionData}
 */
proto.CommsMessage.prototype.getPositionData = function() {
  return /** @type{?proto.PositionData} */ (
    jspb.Message.getWrapperField(this, proto.PositionData, 2));
};


/**
 * @param {?proto.PositionData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setPositionData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearPositionData = function() {
  return this.setPositionData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasPositionData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProfileData profile_data = 3;
 * @return {?proto.ProfileData}
 */
proto.CommsMessage.prototype.getProfileData = function() {
  return /** @type{?proto.ProfileData} */ (
    jspb.Message.getWrapperField(this, proto.ProfileData, 3));
};


/**
 * @param {?proto.ProfileData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setProfileData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearProfileData = function() {
  return this.setProfileData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasProfileData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChatData chat_data = 4;
 * @return {?proto.ChatData}
 */
proto.CommsMessage.prototype.getChatData = function() {
  return /** @type{?proto.ChatData} */ (
    jspb.Message.getWrapperField(this, proto.ChatData, 4));
};


/**
 * @param {?proto.ChatData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setChatData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearChatData = function() {
  return this.setChatData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasChatData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SceneData scene_data = 5;
 * @return {?proto.SceneData}
 */
proto.CommsMessage.prototype.getSceneData = function() {
  return /** @type{?proto.SceneData} */ (
    jspb.Message.getWrapperField(this, proto.SceneData, 5));
};


/**
 * @param {?proto.SceneData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setSceneData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearSceneData = function() {
  return this.setSceneData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasSceneData = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional VoiceData voice_data = 6;
 * @return {?proto.VoiceData}
 */
proto.CommsMessage.prototype.getVoiceData = function() {
  return /** @type{?proto.VoiceData} */ (
    jspb.Message.getWrapperField(this, proto.VoiceData, 6));
};


/**
 * @param {?proto.VoiceData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setVoiceData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearVoiceData = function() {
  return this.setVoiceData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasVoiceData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ProfileRequestData profile_request_data = 7;
 * @return {?proto.ProfileRequestData}
 */
proto.CommsMessage.prototype.getProfileRequestData = function() {
  return /** @type{?proto.ProfileRequestData} */ (
    jspb.Message.getWrapperField(this, proto.ProfileRequestData, 7));
};


/**
 * @param {?proto.ProfileRequestData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setProfileRequestData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearProfileRequestData = function() {
  return this.setProfileRequestData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasProfileRequestData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ProfileResponseData profile_response_data = 8;
 * @return {?proto.ProfileResponseData}
 */
proto.CommsMessage.prototype.getProfileResponseData = function() {
  return /** @type{?proto.ProfileResponseData} */ (
    jspb.Message.getWrapperField(this, proto.ProfileResponseData, 8));
};


/**
 * @param {?proto.ProfileResponseData|undefined} value
 * @return {!proto.CommsMessage} returns this
*/
proto.CommsMessage.prototype.setProfileResponseData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.CommsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CommsMessage} returns this
 */
proto.CommsMessage.prototype.clearProfileResponseData = function() {
  return this.setProfileResponseData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CommsMessage.prototype.hasProfileResponseData = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PositionData.prototype.toObject = function(opt_includeInstance) {
  return proto.PositionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PositionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PositionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    positionY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    positionZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    rotationX: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    rotationY: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    rotationZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    rotationW: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    immediate: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PositionData}
 */
proto.PositionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PositionData;
  return proto.PositionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PositionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PositionData}
 */
proto.PositionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPositionX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPositionY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPositionZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationW(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImmediate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PositionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PositionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PositionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PositionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPositionY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPositionZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getRotationX();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRotationY();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRotationZ();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getRotationW();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getImmediate();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional float position_x = 1;
 * @return {number}
 */
proto.PositionData.prototype.getPositionX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setPositionX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float position_y = 2;
 * @return {number}
 */
proto.PositionData.prototype.getPositionY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setPositionY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float position_z = 3;
 * @return {number}
 */
proto.PositionData.prototype.getPositionZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setPositionZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float rotation_x = 4;
 * @return {number}
 */
proto.PositionData.prototype.getRotationX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setRotationX = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float rotation_y = 5;
 * @return {number}
 */
proto.PositionData.prototype.getRotationY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setRotationY = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float rotation_z = 6;
 * @return {number}
 */
proto.PositionData.prototype.getRotationZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setRotationZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float rotation_w = 7;
 * @return {number}
 */
proto.PositionData.prototype.getRotationW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setRotationW = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool immediate = 8;
 * @return {boolean}
 */
proto.PositionData.prototype.getImmediate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PositionData} returns this
 */
proto.PositionData.prototype.setImmediate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProfileData.prototype.toObject = function(opt_includeInstance) {
  return proto.ProfileData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProfileData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileData.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    profileType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProfileData}
 */
proto.ProfileData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProfileData;
  return proto.ProfileData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProfileData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProfileData}
 */
proto.ProfileData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.ProfileData.ProfileType} */ (reader.readEnum());
      msg.setProfileType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProfileData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProfileData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProfileData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProfileType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ProfileData.ProfileType = {
  DEPLOYED: 0,
  LOCAL: 1
};

/**
 * optional string profile_version = 1;
 * @return {string}
 */
proto.ProfileData.prototype.getProfileVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProfileData} returns this
 */
proto.ProfileData.prototype.setProfileVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.ProfileData.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProfileData} returns this
 */
proto.ProfileData.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ProfileType profile_type = 3;
 * @return {!proto.ProfileData.ProfileType}
 */
proto.ProfileData.prototype.getProfileType = function() {
  return /** @type {!proto.ProfileData.ProfileType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ProfileData.ProfileType} value
 * @return {!proto.ProfileData} returns this
 */
proto.ProfileData.prototype.setProfileType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProfileRequestData.prototype.toObject = function(opt_includeInstance) {
  return proto.ProfileRequestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProfileRequestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileRequestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProfileRequestData}
 */
proto.ProfileRequestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProfileRequestData;
  return proto.ProfileRequestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProfileRequestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProfileRequestData}
 */
proto.ProfileRequestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProfileRequestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProfileRequestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProfileRequestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileRequestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string profile_version = 1;
 * @return {string}
 */
proto.ProfileRequestData.prototype.getProfileVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProfileRequestData} returns this
 */
proto.ProfileRequestData.prototype.setProfileVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.ProfileRequestData.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProfileRequestData} returns this
 */
proto.ProfileRequestData.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProfileResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.ProfileResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProfileResponseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    serializedProfile: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProfileResponseData}
 */
proto.ProfileResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProfileResponseData;
  return proto.ProfileResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProfileResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProfileResponseData}
 */
proto.ProfileResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerializedProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProfileResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProfileResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProfileResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerializedProfile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string serialized_profile = 1;
 * @return {string}
 */
proto.ProfileResponseData.prototype.getSerializedProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProfileResponseData} returns this
 */
proto.ProfileResponseData.prototype.setSerializedProfile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatData.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatData.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatData}
 */
proto.ChatData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatData;
  return proto.ChatData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatData}
 */
proto.ChatData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.ChatData.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatData} returns this
 */
proto.ChatData.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.ChatData.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatData} returns this
 */
proto.ChatData.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SceneData.prototype.toObject = function(opt_includeInstance) {
  return proto.SceneData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SceneData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SceneData.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SceneData}
 */
proto.SceneData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SceneData;
  return proto.SceneData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SceneData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SceneData}
 */
proto.SceneData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SceneData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SceneData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SceneData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SceneData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.SceneData.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SceneData} returns this
 */
proto.SceneData.prototype.setSceneId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.SceneData.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SceneData} returns this
 */
proto.SceneData.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VoiceData.prototype.toObject = function(opt_includeInstance) {
  return proto.VoiceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VoiceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoiceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    encodedSamples: msg.getEncodedSamples_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VoiceData}
 */
proto.VoiceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VoiceData;
  return proto.VoiceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VoiceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VoiceData}
 */
proto.VoiceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedSamples(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VoiceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VoiceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VoiceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoiceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedSamples_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes encoded_samples = 1;
 * @return {!(string|Uint8Array)}
 */
proto.VoiceData.prototype.getEncodedSamples = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encoded_samples = 1;
 * This is a type-conversion wrapper around `getEncodedSamples()`
 * @return {string}
 */
proto.VoiceData.prototype.getEncodedSamples_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedSamples()));
};


/**
 * optional bytes encoded_samples = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedSamples()`
 * @return {!Uint8Array}
 */
proto.VoiceData.prototype.getEncodedSamples_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedSamples()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.VoiceData} returns this
 */
proto.VoiceData.prototype.setEncodedSamples = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.VoiceData.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VoiceData} returns this
 */
proto.VoiceData.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
