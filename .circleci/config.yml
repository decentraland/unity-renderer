version: 2.1

references:
  .working_directory: &working_directory /tmp/workspace/unity-renderer
  #                                                     ~~~~~~~~~~~~~~~~ <- repo name

  .working_directory_root: &working_directory_root
    working_directory: *working_directory

  .attach_root: &attach_root
    attach_workspace:
      at: *working_directory

  .unity_linux_image: &unity_linux_image
    - image: unityci/editor:ubuntu-2021.3.14f1-linux-il2cpp-1.0.1
      environment:
        DCL_OUTPUT_NAME: linux
        PROJECT_PATH: /tmp/workspace/unity-renderer/unity-renderer
        BUILD_TARGET: StandaloneLinux64
        BUILD_NAME: unity-renderer-linux
        BUILD_PATH: /tmp/workspace/unity-renderer/Builds/unity-renderer-linux/
        #                          ~~~~~~~~~~~~~~~~ <- repo name
        #                                                  ~~~~~~~~~~~~~~~~~~~~ <- folder name

  .unity_mac_image: &unity_mac_image
    - image: unityci/editor:ubuntu-2021.3.14f1-mac-mono-1.0.1
      environment:
        DCL_OUTPUT_NAME: mac
        PROJECT_PATH: /tmp/workspace/unity-renderer/unity-renderer
        BUILD_TARGET: StandaloneOSX
        BUILD_NAME: unity-renderer-mac
        BUILD_PATH: /tmp/workspace/unity-renderer/Builds/unity-renderer-mac/
        #                          ~~~~~~~~~~~~~~~~ <- repo name
        #                                                  ~~~~~~~~~~~~~~~~~~ <- folder name

  .unity_windows_image: &unity_windows_image
    - image: unityci/editor:ubuntu-2021.3.14f1-windows-mono-1.0.1
      environment:
        DCL_OUTPUT_NAME: windows
        PROJECT_PATH: /tmp/workspace/unity-renderer/unity-renderer
        BUILD_TARGET: StandaloneWindows64
        BUILD_NAME: unity-renderer-windows
        BUILD_PATH: /tmp/workspace/unity-renderer/Builds/unity-renderer-windows/
        #                          ~~~~~~~~~~~~~~~~ <- repo name
        #                                                  ~~~~~~~~~~~~~~~~~~~~~~ <- folder name

  .unity_webgl_image: &unity_webgl_image
    - image: unityci/editor:2021.3.14f1-webgl-1
      environment:
        DCL_OUTPUT_NAME: webgl
        PROJECT_PATH: /tmp/workspace/unity-renderer/unity-renderer
        BUILD_TARGET: WebGL
        BUILD_NAME: unity
        BUILD_PATH: /tmp/workspace/unity-renderer/Builds/unity/
        #                          ~~~~~~~~~~~~~~~~ <- repo name
        #                                                  ~~~~~~~~~~~~~~~~~~ <- folder name

  .image_kernel: &image_kernel
    - image: cimg/node:16.18.1-browsers
      environment:
        BUILD_PATH: /tmp/workspace/unity-renderer/Builds/unity/
        #                          ~~~~~~~~~~~~~~ <- repo name
        #                                         ~~~~~~~~~~~~~~ <- folder name

  .cached_paths: &CACHED_PATHS
    - ./unity-renderer/test-results
    - ./unity-renderer/editmode-logs.txt
    - ./unity-renderer/playmode-logs.txt
    - ./unity-renderer/build-logs.txt
    - ./unity-renderer/ab-logs.txt
    - ./unity-renderer/playmode-results.xml
    - ./unity-renderer/CodeCoverage
    - ./unity-renderer/TestResources/VisualTests
    - ./Builds/

  .all_branches: &all_branches
    filters:
      branches:
        only: /(.*)/

  .only_dev_and_main: &only_dev_and_main
    filters:
      branches:
        only: /(.*)/

commands:
  build-unity-generic:
    steps:
      - run:
          name: Prepare image
          command: |
            apt-get update
            apt-get install -y zip jq gpg
      - run: &HASH_UNITY_FILES
          name: Get the hash of source files
          command: |
            # hash unity files
            find ./unity-renderer -type f \( -not -path '*Library*' \) \( -not -path '*browser-interface*' \) \( -iname \*.unity -o -iname \*.sh -o -iname \*.cs -o -iname \*.xml -o -iname \*.shader -o -iname \*.prefab -o -iname \*.yml -o -iname \*.mat -o -iname \*.json -o -iname \*.js -o -iname \*.jspre  -o -iname \*.jslib  -o -iname \*.hlsl  -o -iname \*.asmdef  -o -iname \*.csproj  -o -iname \*.spriteatlas  -o -iname \*.asset  \) \( -exec md5sum "$PWD"/{} \; \) | sort > ../.unitysources-checksum

            # hash pipeline files
            find ./ -type f \( -iname \*.sh -o -iname \*.yml \) \( -exec md5sum "$PWD"/{} \; \) | sort >> ../.unitysources-checksum

            cat ../.unitysources-checksum
      - run: &STORE_TARGET
          name: Save target to file
          command: |
            echo $DCL_OUTPUT_NAME > /tmp/target
      - restore_cache:
          keys:
            - build-{{ checksum "/tmp/target" }}-{{ checksum "../.unitysources-checksum" }}-{{ .Branch }}
            - build-{{ checksum "/tmp/target" }}-{{ checksum "../.unitysources-checksum" }}-dev
      - restore_cache: &RESTORE_LIBRARY_CACHE
          name: Restore library if exists
          keys:
            - library-{{ checksum "/tmp/target" }}-{{ .Branch }}
            - library-{{ checksum "/tmp/target" }}-dev
      - run:
          name: Build Unity Project
          no_output_timeout: 45m
          command: |
            if [[ ! -e ${BUILD_PATH} ]] || [[ ! -e "${PROJECT_PATH}/build-logs.txt" ]] || [[ ! -n "$(ls -A ${BUILD_PATH})" ]]; then
                mkdir -p ${BUILD_PATH}

                ./ci-build.sh
            else
              echo "Skipping build, using cached artifacts."
            fi;
      - run:
          name: Print build logs
          command: cat ${PROJECT_PATH}/build-logs.txt
          when: always

      - save_cache:
          name: Store build cache
          key: build-{{ checksum "/tmp/target" }}-{{ checksum "../.unitysources-checksum" }}-{{ .Branch }}
          paths: *CACHED_PATHS
      - save_cache:
          name: Store library
          key: library-{{ checksum "/tmp/target" }}-{{ .Branch }}
          paths:
            - ./unity-renderer/Library
      - run:
          name: Check there are build artifacts
          command: |
            if [ -z "$(ls -A "${BUILD_PATH}")" ]; then
              echo "directory ${BUILD_PATH} is empty"
              exit 1
            fi
      - run:
          name: Print all files
          command: |
            find "${BUILD_PATH}"
  persist-unity-desktop:
    steps:
      - run:
          name: Compress artifacts
          command: |
            pushd ${BUILD_PATH}
            zip -r unity-renderer-${DCL_OUTPUT_NAME}.zip ./
            popd
            mkdir -p unity-artifacts
            mv ${BUILD_PATH}/unity-renderer-${DCL_OUTPUT_NAME}.zip unity-artifacts
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./unity-artifacts/
  persist-unity-web:
    steps:
      - persist_to_workspace:
          root: *working_directory
          paths:
            - Builds


jobs:
  checkout:
    <<: *working_directory_root
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - run:
          name: Prepare image
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
      - checkout
      - run:
          name: Components and Renderer Protocol code generation
          command: |
            cd protocol-gen
            npm install
            npm run build
      - run:
          name: Update sentry params
          command: |
            cd scripts
            npm install
            npm run inject-sentry-params

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *working_directory
          paths:
            - '*'
  build-unity-for-linux:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_linux_image
    steps:
      - <<: *attach_root
      - build-unity-generic
      - persist-unity-desktop
  build-unity-for-windows:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_windows_image
    steps:
      - <<: *attach_root
      - build-unity-generic
      - persist-unity-desktop
  build-unity-for-mac:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_mac_image
    steps:
      - <<: *attach_root
      - build-unity-generic
      - persist-unity-desktop
  build-unity-for-webgl:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_webgl_image
    steps:
      - <<: *attach_root
      - build-unity-generic
      - persist-unity-web
  playmode-tests:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_windows_image
    steps:
      - <<: *attach_root
      - run: &HASH_UNITY_FILES
          name: Get the hash of source files
          command: |
            # hash unity files
            find ./unity-renderer -type f \( -not -path '*Library*' \) \( -not -path '*browser-interface*' \) \( -not -path '*node_modules*' \) \( -iname \*.unity -o -iname \*.sh -o -iname \*.cs -o -iname \*.meta -o -iname \*.xml -o -iname \*.shader -o -iname \*.prefab -o -iname \*.yml -o -iname \*.mat -o -iname \*.json -o -iname \*.js -o -iname \*.jspre  -o -iname \*.jslib  -o -iname \*.hlsl  -o -iname \*.asmdef  -o -iname \*.csproj  -o -iname \*.spriteatlas  -o -iname \*.asset  \) \( -exec md5sum "$PWD"/{} \; \) | sort > ../.unitysources-checksum
            # hash pipeline files
            find ./ -type f \( -not -path '*node_modules*' \) \( -iname \*.sh -o -iname \*.yml \) \( -exec md5sum "$PWD"/{} \; \) | sort >> ../.unitysources-checksum
      - run: *STORE_TARGET
      - restore_cache:
          name: Restore hashed files if they exist
          keys:
            - unity-playmode-{{ checksum "../.unitysources-checksum" }}
      - restore_cache: *RESTORE_LIBRARY_CACHE
      - run:
          name: Prepare image
          command: |
            apt-get update
            apt-get install -y zip jq gpg
      - run:
          name: Run playmode tests
          command: |
            if [[ -e ./unity-renderer/playmode-logs.txt ]]; then
                echo "Skipping playmode tests"
                exit 0
            else
                bash ci-playmode-test.sh
                exit $?
            fi;
          no_output_timeout: 30m
      - run:
          name: nunit-to-junit
          when: always
          command: |
            apt-get update
            apt-get install -y xsltproc
            xsltproc --output unity-renderer/test-results/playmode-results-junit.xml nunit-to-junit.xsl unity-renderer/playmode-results.xml
      - run: DEBIAN_FRONTEND=noninteractive apt-get -y -qq install awscli
      - run:
          name: upload code coverage
          command: |
            aws s3 sync /tmp/workspace/unity-renderer/unity-renderer/CodeCoverage/Report "s3://${S3_BUCKET}/desktop-coverage/${CIRCLE_BRANCH}" --acl public-read
      - store_test_results:
          path: ./unity-renderer/test-results
      - store_artifacts:
          name: Store logs
          path: ./unity-renderer/playmode-logs.txt
      - store_artifacts:
          name: Store test results
          path: ./unity-renderer/playmode-results.xml
      - save_cache:
          name: Store test cache
          key: unity-playmode-{{ checksum "../.unitysources-checksum" }}
          paths: *CACHED_PATHS
      - store_artifacts: &STORE_VISUAL_TESTS
          name: Store visual tests result as artifacts
          path: ./unity-renderer/TestResources/VisualTests
  publish-desktop-artifacts:
    <<: *working_directory_root
    docker:
      - image: cimg/base:2021.04
    steps:
      - <<: *attach_root
      - run:
          name: Prepare image
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
      - run:
          name: Upload artifacts
          command: |
            ./ci-publish-preview-artifacts.sh

  test-js-interface:
    <<: *working_directory_root
    docker: *image_kernel

    steps:
      - <<: *attach_root
      - run:
          working_directory: &node_workspace browser-interface
          name: clean install
          command: |
            sudo apt-get install xvfb
            npm ci
      - run:
          working_directory: *node_workspace
          name: test
          command: make test-ci

  build-js-interface:
    <<: *working_directory_root
    docker: *image_kernel

    steps:
      - <<: *attach_root
      - run:
          working_directory: &node_workspace browser-interface
          name: clean install
          command: npm ci
      - run:
          working_directory: *node_workspace
          name: run build
          command: make build-essentials build-release build-deploy
      - run:
          working_directory: *node_workspace
          name: Deploy artifacts
          command: npm run publish-artifacts

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *working_directory
          paths:
            - *node_workspace

  publish-webgl-artifacts:
    <<: *working_directory_root
    docker: *image_kernel

    steps:
      - <<: *attach_root
      - run:
          name: Set up NPM access tokens
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          when: on_success
      - run:
          working_directory: *node_workspace
          name: print files to publish
          command: find static
      - run:
          working_directory: *node_workspace
          name: npm run publish
          command: npm run publish

workflows:
  version: 2
  build-deploy:
    jobs:
      - checkout:
          <<: *all_branches

       - build-unity-for-linux:
          <<: *only_dev_and_main
          requires:
            - checkout

      - build-unity-for-windows:
          <<: *all_branches
          requires:
            - checkout

       - build-unity-for-mac:
           <<: *only_dev_and_main
           requires:
             - checkout

      - build-unity-for-webgl:
          <<: *all_branches
          requires:
            - checkout

      - playmode-tests:
          <<: *all_branches
          requires:
            - checkout

      - publish-desktop-artifacts:
          <<: *all_branches
          requires:
            - build-unity-for-linux
            - build-unity-for-windows
            - build-unity-for-mac

      - build-js-interface:
          <<: *all_branches
          requires:
            - build-unity-for-webgl

      - test-js-interface:
          <<: *all_branches
          requires:
            - checkout

      - publish-webgl-artifacts:
          requires:
            - build-unity-for-webgl
            - build-js-interface
            - test-js-interface
            - playmode-tests
            # - editmode-tests
