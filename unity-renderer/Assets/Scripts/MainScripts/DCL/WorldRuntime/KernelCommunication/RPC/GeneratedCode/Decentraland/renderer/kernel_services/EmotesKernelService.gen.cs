// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: decentraland.renderer.kernel_services
// file: decentraland/renderer/kernel_services/emotes_kernel.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
namespace Decentraland.Renderer.KernelServices {
public interface IEmotesKernelService<Context>
{

  UniTask<TriggerExpressionResponse> TriggerExpression(TriggerExpressionRequest request, Context context, CancellationToken ct);

}

public static class EmotesKernelServiceCodeGen
{
  public const string ServiceName = "EmotesKernelService";

  public static void RegisterService<Context>(RpcServerPort<Context> port, IEmotesKernelService<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("TriggerExpression", async (payload, context, ct) => { var res = await service.TriggerExpression(TriggerExpressionRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
