// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: 
// file: Teleport.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;

public abstract class TeleportService<Context>
{
  public const string ServiceName = "TeleportService";

  public delegate UniTask<global::Teleport.Types.FromKernel.Types.TeleportResponse> Teleport(global::Teleport.Types.FromKernel.Types.Teleport request, Context context, CancellationToken ct);

  public delegate UniTask<global::Teleport.Types.FromKernel.Types.RequestTeleportResponse> RequestTeleport(global::Teleport.Types.FromKernel.Types.RequestTeleport request, Context context, CancellationToken ct);

  public delegate IEnumerator<global::Teleport.Types.FromRenderer> OnMessage(global::Teleport.Types.FromRenderer.Types.StreamRequest request, Context context);

  public static void RegisterService(RpcServerPort<Context> port, Teleport teleport, RequestTeleport requestTeleport, OnMessage onMessage)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("Teleport", async (payload, context, ct) => { var res = await teleport(global::Teleport.Types.FromKernel.Types.Teleport.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("RequestTeleport", async (payload, context, ct) => { var res = await requestTeleport(global::Teleport.Types.FromKernel.Types.RequestTeleport.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.streamDefinition.Add("OnMessage", (payload, context) => { return new ProtocolHelpers.StreamEnumerator<global::Teleport.Types.FromRenderer>(onMessage(global::Teleport.Types.FromRenderer.Types.StreamRequest.Parser.ParseFrom(payload), context)); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
