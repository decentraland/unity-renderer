// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: 
// file: protocol.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;

public abstract class CRDTServiceBase<Context>
{
  public const string ServiceName = "CRDTService";

  protected abstract UniTask<CRDTResponse> SendCrdt(CRDTManyMessages request, Context context, CancellationToken ct);

  protected abstract UniTask<CRDTManyMessages> PullCrdt(PullCRDTRequest request, Context context, CancellationToken ct);

  protected abstract IUniTaskAsyncEnumerable<CRDTManyMessages> CrdtNotificationStream(CRDTStreamRequest request, Context context);

  public static void RegisterService(RpcServerPort<Context> port, CRDTServiceBase<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("SendCrdt", async (payload, context, ct) => { var res = await service.SendCrdt(CRDTManyMessages.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("PullCrdt", async (payload, context, ct) => { var res = await service.PullCrdt(PullCRDTRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.serverStreamDefinition.Add("CrdtNotificationStream", (payload, context) => { return ProtocolHelpers.SerializeMessageEnumerator<CRDTManyMessages>(service.CrdtNotificationStream(CRDTStreamRequest.Parser.ParseFrom(payload), context)); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
