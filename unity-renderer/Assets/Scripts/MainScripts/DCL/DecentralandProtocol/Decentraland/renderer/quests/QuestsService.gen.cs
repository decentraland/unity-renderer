// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: decentraland.quests
// file: decentraland/renderer/quests/quests.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
using Google.Protobuf.WellKnownTypes;
namespace Decentraland.Quests {
public interface IQuestsService<Context>
{

  UniTask<StartQuestResponse> StartQuest(StartQuestRequest request, Context context, CancellationToken ct);

  UniTask<AbortQuestResponse> AbortQuest(AbortQuestRequest request, Context context, CancellationToken ct);

  UniTask<EventResponse> SendEvent(EventRequest request, Context context, CancellationToken ct);

  IUniTaskAsyncEnumerable<UserUpdate> Subscribe(Empty request, Context context);

  UniTask<GetAllQuestsResponse> GetAllQuests(Empty request, Context context, CancellationToken ct);

  UniTask<GetQuestDefinitionResponse> GetQuestDefinition(GetQuestDefinitionRequest request, Context context, CancellationToken ct);

}

public static class QuestsServiceCodeGen
{
  public const string ServiceName = "QuestsService";

  public static void RegisterService<Context>(RpcServerPort<Context> port, IQuestsService<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("StartQuest", async (payload, context, ct) => { var res = await service.StartQuest(StartQuestRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("AbortQuest", async (payload, context, ct) => { var res = await service.AbortQuest(AbortQuestRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("SendEvent", async (payload, context, ct) => { var res = await service.SendEvent(EventRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.serverStreamDefinition.Add("Subscribe", (payload, context) => { return ProtocolHelpers.SerializeMessageEnumerator<UserUpdate>(service.Subscribe(Empty.Parser.ParseFrom(payload), context)); });
    result.definition.Add("GetAllQuests", async (payload, context, ct) => { var res = await service.GetAllQuests(Empty.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("GetQuestDefinition", async (payload, context, ct) => { var res = await service.GetQuestDefinition(GetQuestDefinitionRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
