// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: decentraland.renderer.renderer_services
// file: decentraland/renderer/renderer_services/transport.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
namespace Decentraland.Renderer.RendererServices {
public interface ITransportService<Context>
{

  IUniTaskAsyncEnumerable<Payload> OpenTransportStream(IUniTaskAsyncEnumerable<Payload> streamRequest, Context context);

}

public static class TransportServiceCodeGen
{
  public const string ServiceName = "TransportService";

  public static void RegisterService<Context>(RpcServerPort<Context> port, ITransportService<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.bidirectionalStreamDefinition.Add("OpenTransportStream", (IUniTaskAsyncEnumerable<ByteString> payload, Context context) => {
      return ProtocolHelpers.SerializeMessageEnumerator<Payload>(service.OpenTransportStream(
        ProtocolHelpers.DeserializeMessageEnumerator<Payload>(payload, s => Payload.Parser.ParseFrom(s)), context));
    });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
