// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: decentraland.renderer.renderer_services
// file: decentraland/renderer/renderer_services/restricted_actions.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
namespace Decentraland.Renderer.RendererServices {
public interface IRestrictedActionsService<Context>
{

  UniTask<OpenModalResponse> TeleportTo(TeleportToRequest request, Context context, CancellationToken ct);

  UniTask<OpenModalResponse> OpenExternalUrl(OpenExternalUrlRequest request, Context context, CancellationToken ct);

  UniTask<OpenModalResponse> OpenNftDialog(OpenNftDialogRequest request, Context context, CancellationToken ct);

}

public static class RestrictedActionsServiceCodeGen
{
  public const string ServiceName = "RestrictedActionsService";

  public static void RegisterService<Context>(RpcServerPort<Context> port, IRestrictedActionsService<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("TeleportTo", async (payload, context, ct) => { var res = await service.TeleportTo(TeleportToRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("OpenExternalUrl", async (payload, context, ct) => { var res = await service.OpenExternalUrl(OpenExternalUrlRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.definition.Add("OpenNftDialog", async (payload, context, ct) => { var res = await service.OpenNftDialog(OpenNftDialogRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
