// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: decentraland.bff
// file: decentraland/bff/topics_service.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;
namespace Decentraland.Bff {
public interface ITopicsService<Context>
{

  IUniTaskAsyncEnumerable<PeerTopicSubscriptionResultElem> PeerSubscription(SubscriptionRequest request, Context context);

  IUniTaskAsyncEnumerable<SystemTopicSubscriptionResultElem> SystemSubscription(SubscriptionRequest request, Context context);

  UniTask<PublishToTopicResult> PublishToTopic(PublishToTopicRequest request, Context context, CancellationToken ct);

}

public static class TopicsServiceCodeGen
{
  public const string ServiceName = "TopicsService";

  public static void RegisterService<Context>(RpcServerPort<Context> port, ITopicsService<Context> service)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.serverStreamDefinition.Add("PeerSubscription", (payload, context) => { return ProtocolHelpers.SerializeMessageEnumerator<PeerTopicSubscriptionResultElem>(service.PeerSubscription(SubscriptionRequest.Parser.ParseFrom(payload), context)); });
    result.serverStreamDefinition.Add("SystemSubscription", (payload, context) => { return ProtocolHelpers.SerializeMessageEnumerator<SystemTopicSubscriptionResultElem>(service.SystemSubscription(SubscriptionRequest.Parser.ParseFrom(payload), context)); });
    result.definition.Add("PublishToTopic", async (payload, context, ct) => { var res = await service.PublishToTopic(PublishToTopicRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
}
