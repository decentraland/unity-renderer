// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlaneShape.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DCL.ECSComponents {

  /// <summary>Holder for reflection information generated from PlaneShape.proto</summary>
  public static partial class PlaneShapeReflection {

    #region Descriptor
    /// <summary>File descriptor for PlaneShape.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlaneShapeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQbGFuZVNoYXBlLnByb3RvEhBkZWNlbnRyYWxhbmQuZWNzImEKDFBCUGxh",
            "bmVTaGFwZRIXCg93aXRoX2NvbGxpc2lvbnMYASABKAgSGgoSaXNfcG9pbnRl",
            "cl9ibG9ja2VyGAIgASgIEg8KB3Zpc2libGUYAyABKAgSCwoDdXZzGAQgAygC",
            "QhSqAhFEQ0wuRUNTQ29tcG9uZW50c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DCL.ECSComponents.PBPlaneShape), global::DCL.ECSComponents.PBPlaneShape.Parser, new[]{ "WithCollisions", "IsPointerBlocker", "Visible", "Uvs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PBPlaneShape : pb::IMessage<PBPlaneShape> {
    private static readonly pb::MessageParser<PBPlaneShape> _parser = new pb::MessageParser<PBPlaneShape>(() => new PBPlaneShape());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBPlaneShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DCL.ECSComponents.PlaneShapeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBPlaneShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBPlaneShape(PBPlaneShape other) : this() {
      withCollisions_ = other.withCollisions_;
      isPointerBlocker_ = other.isPointerBlocker_;
      visible_ = other.visible_;
      uvs_ = other.uvs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBPlaneShape Clone() {
      return new PBPlaneShape(this);
    }

    /// <summary>Field number for the "with_collisions" field.</summary>
    public const int WithCollisionsFieldNumber = 1;
    private bool withCollisions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithCollisions {
      get { return withCollisions_; }
      set {
        withCollisions_ = value;
      }
    }

    /// <summary>Field number for the "is_pointer_blocker" field.</summary>
    public const int IsPointerBlockerFieldNumber = 2;
    private bool isPointerBlocker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPointerBlocker {
      get { return isPointerBlocker_; }
      set {
        isPointerBlocker_ = value;
      }
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 3;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "uvs" field.</summary>
    public const int UvsFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_uvs_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> uvs_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Uvs {
      get { return uvs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBPlaneShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBPlaneShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WithCollisions != other.WithCollisions) return false;
      if (IsPointerBlocker != other.IsPointerBlocker) return false;
      if (Visible != other.Visible) return false;
      if(!uvs_.Equals(other.uvs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WithCollisions != false) hash ^= WithCollisions.GetHashCode();
      if (IsPointerBlocker != false) hash ^= IsPointerBlocker.GetHashCode();
      if (Visible != false) hash ^= Visible.GetHashCode();
      hash ^= uvs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WithCollisions != false) {
        output.WriteRawTag(8);
        output.WriteBool(WithCollisions);
      }
      if (IsPointerBlocker != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPointerBlocker);
      }
      if (Visible != false) {
        output.WriteRawTag(24);
        output.WriteBool(Visible);
      }
      uvs_.WriteTo(output, _repeated_uvs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WithCollisions != false) {
        size += 1 + 1;
      }
      if (IsPointerBlocker != false) {
        size += 1 + 1;
      }
      if (Visible != false) {
        size += 1 + 1;
      }
      size += uvs_.CalculateSize(_repeated_uvs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBPlaneShape other) {
      if (other == null) {
        return;
      }
      if (other.WithCollisions != false) {
        WithCollisions = other.WithCollisions;
      }
      if (other.IsPointerBlocker != false) {
        IsPointerBlocker = other.IsPointerBlocker;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      uvs_.Add(other.uvs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WithCollisions = input.ReadBool();
            break;
          }
          case 16: {
            IsPointerBlocker = input.ReadBool();
            break;
          }
          case 24: {
            Visible = input.ReadBool();
            break;
          }
          case 34:
          case 37: {
            uvs_.AddEntriesFrom(input, _repeated_uvs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
