// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CylinderShape.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DCL.ECSComponents {

  /// <summary>Holder for reflection information generated from CylinderShape.proto</summary>
  public static partial class CylinderShapeReflection {

    #region Descriptor
    /// <summary>File descriptor for CylinderShape.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CylinderShapeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDeWxpbmRlclNoYXBlLnByb3RvEhBkZWNlbnRyYWxhbmQuZWNzIvMBCg9Q",
            "QkN5bGluZGVyU2hhcGUSHAoPd2l0aF9jb2xsaXNpb25zGAEgASgISACIAQES",
            "HwoSaXNfcG9pbnRlcl9ibG9ja2VyGAIgASgISAGIAQESFAoHdmlzaWJsZRgD",
            "IAEoCEgCiAEBEhcKCnJhZGl1c190b3AYBCABKAJIA4gBARIaCg1yYWRpdXNf",
            "Ym90dG9tGAUgASgCSASIAQFCEgoQX3dpdGhfY29sbGlzaW9uc0IVChNfaXNf",
            "cG9pbnRlcl9ibG9ja2VyQgoKCF92aXNpYmxlQg0KC19yYWRpdXNfdG9wQhAK",
            "Dl9yYWRpdXNfYm90dG9tQhSqAhFEQ0wuRUNTQ29tcG9uZW50c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DCL.ECSComponents.PBCylinderShape), global::DCL.ECSComponents.PBCylinderShape.Parser, new[]{ "WithCollisions", "IsPointerBlocker", "Visible", "RadiusTop", "RadiusBottom" }, new[]{ "WithCollisions", "IsPointerBlocker", "Visible", "RadiusTop", "RadiusBottom" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PBCylinderShape : pb::IMessage<PBCylinderShape>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PBCylinderShape> _parser = new pb::MessageParser<PBCylinderShape>(() => new PBCylinderShape());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PBCylinderShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DCL.ECSComponents.CylinderShapeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBCylinderShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBCylinderShape(PBCylinderShape other) : this() {
      _hasBits0 = other._hasBits0;
      withCollisions_ = other.withCollisions_;
      isPointerBlocker_ = other.isPointerBlocker_;
      visible_ = other.visible_;
      radiusTop_ = other.radiusTop_;
      radiusBottom_ = other.radiusBottom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBCylinderShape Clone() {
      return new PBCylinderShape(this);
    }

    /// <summary>Field number for the "with_collisions" field.</summary>
    public const int WithCollisionsFieldNumber = 1;
    private bool withCollisions_;
    /// <summary>
    /// default=true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WithCollisions {
      get { if ((_hasBits0 & 1) != 0) { return withCollisions_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        withCollisions_ = value;
      }
    }
    /// <summary>Gets whether the "with_collisions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWithCollisions {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "with_collisions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWithCollisions() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_pointer_blocker" field.</summary>
    public const int IsPointerBlockerFieldNumber = 2;
    private bool isPointerBlocker_;
    /// <summary>
    /// default=true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPointerBlocker {
      get { if ((_hasBits0 & 2) != 0) { return isPointerBlocker_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        isPointerBlocker_ = value;
      }
    }
    /// <summary>Gets whether the "is_pointer_blocker" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPointerBlocker {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_pointer_blocker" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPointerBlocker() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 3;
    private bool visible_;
    /// <summary>
    /// default=true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Visible {
      get { if ((_hasBits0 & 4) != 0) { return visible_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        visible_ = value;
      }
    }
    /// <summary>Gets whether the "visible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVisible {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "visible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVisible() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "radius_top" field.</summary>
    public const int RadiusTopFieldNumber = 4;
    private float radiusTop_;
    /// <summary>
    /// default=1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RadiusTop {
      get { if ((_hasBits0 & 8) != 0) { return radiusTop_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        radiusTop_ = value;
      }
    }
    /// <summary>Gets whether the "radius_top" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRadiusTop {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "radius_top" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRadiusTop() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "radius_bottom" field.</summary>
    public const int RadiusBottomFieldNumber = 5;
    private float radiusBottom_;
    /// <summary>
    /// default=1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RadiusBottom {
      get { if ((_hasBits0 & 16) != 0) { return radiusBottom_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        radiusBottom_ = value;
      }
    }
    /// <summary>Gets whether the "radius_bottom" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRadiusBottom {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "radius_bottom" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRadiusBottom() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PBCylinderShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PBCylinderShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WithCollisions != other.WithCollisions) return false;
      if (IsPointerBlocker != other.IsPointerBlocker) return false;
      if (Visible != other.Visible) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RadiusTop, other.RadiusTop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RadiusBottom, other.RadiusBottom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWithCollisions) hash ^= WithCollisions.GetHashCode();
      if (HasIsPointerBlocker) hash ^= IsPointerBlocker.GetHashCode();
      if (HasVisible) hash ^= Visible.GetHashCode();
      if (HasRadiusTop) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RadiusTop);
      if (HasRadiusBottom) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RadiusBottom);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWithCollisions) {
        output.WriteRawTag(8);
        output.WriteBool(WithCollisions);
      }
      if (HasIsPointerBlocker) {
        output.WriteRawTag(16);
        output.WriteBool(IsPointerBlocker);
      }
      if (HasVisible) {
        output.WriteRawTag(24);
        output.WriteBool(Visible);
      }
      if (HasRadiusTop) {
        output.WriteRawTag(37);
        output.WriteFloat(RadiusTop);
      }
      if (HasRadiusBottom) {
        output.WriteRawTag(45);
        output.WriteFloat(RadiusBottom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWithCollisions) {
        output.WriteRawTag(8);
        output.WriteBool(WithCollisions);
      }
      if (HasIsPointerBlocker) {
        output.WriteRawTag(16);
        output.WriteBool(IsPointerBlocker);
      }
      if (HasVisible) {
        output.WriteRawTag(24);
        output.WriteBool(Visible);
      }
      if (HasRadiusTop) {
        output.WriteRawTag(37);
        output.WriteFloat(RadiusTop);
      }
      if (HasRadiusBottom) {
        output.WriteRawTag(45);
        output.WriteFloat(RadiusBottom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasWithCollisions) {
        size += 1 + 1;
      }
      if (HasIsPointerBlocker) {
        size += 1 + 1;
      }
      if (HasVisible) {
        size += 1 + 1;
      }
      if (HasRadiusTop) {
        size += 1 + 4;
      }
      if (HasRadiusBottom) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PBCylinderShape other) {
      if (other == null) {
        return;
      }
      if (other.HasWithCollisions) {
        WithCollisions = other.WithCollisions;
      }
      if (other.HasIsPointerBlocker) {
        IsPointerBlocker = other.IsPointerBlocker;
      }
      if (other.HasVisible) {
        Visible = other.Visible;
      }
      if (other.HasRadiusTop) {
        RadiusTop = other.RadiusTop;
      }
      if (other.HasRadiusBottom) {
        RadiusBottom = other.RadiusBottom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WithCollisions = input.ReadBool();
            break;
          }
          case 16: {
            IsPointerBlocker = input.ReadBool();
            break;
          }
          case 24: {
            Visible = input.ReadBool();
            break;
          }
          case 37: {
            RadiusTop = input.ReadFloat();
            break;
          }
          case 45: {
            RadiusBottom = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WithCollisions = input.ReadBool();
            break;
          }
          case 16: {
            IsPointerBlocker = input.ReadBool();
            break;
          }
          case 24: {
            Visible = input.ReadBool();
            break;
          }
          case 37: {
            RadiusTop = input.ReadFloat();
            break;
          }
          case 45: {
            RadiusBottom = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
