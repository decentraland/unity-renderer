// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: decentraland/sdk/components/material.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DCL.ECSComponents {

  /// <summary>Holder for reflection information generated from decentraland/sdk/components/material.proto</summary>
  public static partial class MaterialReflection {

    #region Descriptor
    /// <summary>File descriptor for decentraland/sdk/components/material.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MaterialReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipkZWNlbnRyYWxhbmQvc2RrL2NvbXBvbmVudHMvbWF0ZXJpYWwucHJvdG8S",
            "G2RlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50cxogZGVjZW50cmFsYW5kL2Nv",
            "bW1vbi9jb2xvcnMucHJvdG8iqwwKClBCTWF0ZXJpYWwSRgoLc3JjX3RleHR1",
            "cmUYASABKAsyLy5kZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuUEJNYXRl",
            "cmlhbC5UZXh0dXJlSAASTwoOYXZhdGFyX3RleHR1cmUYAiABKAsyNS5kZWNl",
            "bnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuUEJNYXRlcmlhbC5BdmF0YXJUZXh0",
            "dXJlSAASFwoKYWxwaGFfdGVzdBgDIAEoAkgBiAEBEhkKDGNhc3Rfc2hhZG93",
            "cxgEIAEoCEgCiAEBEksKDWFscGhhX3RleHR1cmUYBSABKAsyLy5kZWNlbnRy",
            "YWxhbmQuc2RrLmNvbXBvbmVudHMuUEJNYXRlcmlhbC5UZXh0dXJlSAOIAQES",
            "TgoQZW1pc3NpdmVfdGV4dHVyZRgGIAEoCzIvLmRlY2VudHJhbGFuZC5zZGsu",
            "Y29tcG9uZW50cy5QQk1hdGVyaWFsLlRleHR1cmVIBIgBARJKCgxidW1wX3Rl",
            "eHR1cmUYByABKAsyLy5kZWNlbnRyYWxhbmQuc2RrLmNvbXBvbmVudHMuUEJN",
            "YXRlcmlhbC5UZXh0dXJlSAWIAQESNgoMYWxiZWRvX2NvbG9yGAggASgLMhsu",
            "ZGVjZW50cmFsYW5kLmNvbW1vbi5Db2xvcjNIBogBARI4Cg5lbWlzc2l2ZV9j",
            "b2xvchgJIAEoCzIbLmRlY2VudHJhbGFuZC5jb21tb24uQ29sb3IzSAeIAQES",
            "PAoScmVmbGVjdGl2aXR5X2NvbG9yGAogASgLMhsuZGVjZW50cmFsYW5kLmNv",
            "bW1vbi5Db2xvcjNICIgBARJVChF0cmFuc3BhcmVuY3lfbW9kZRgLIAEoDjI1",
            "LmRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50cy5NYXRlcmlhbFRyYW5zcGFy",
            "ZW5jeU1vZGVICYgBARIVCghtZXRhbGxpYxgMIAEoAkgKiAEBEhYKCXJvdWdo",
            "bmVzcxgNIAEoAkgLiAEBEhcKCmdsb3NzaW5lc3MYDiABKAJIDIgBARIfChJz",
            "cGVjdWxhcl9pbnRlbnNpdHkYDyABKAJIDYgBARIfChJlbWlzc2l2ZV9pbnRl",
            "bnNpdHkYECABKAJIDogBARIdChBkaXJlY3RfaW50ZW5zaXR5GBEgASgCSA+I",
            "AQEaxAEKB1RleHR1cmUSCwoDc3JjGAEgASgJEkQKCXdyYXBfbW9kZRgCIAEo",
            "DjIsLmRlY2VudHJhbGFuZC5zZGsuY29tcG9uZW50cy5UZXh0dXJlV3JhcE1v",
            "ZGVIAIgBARJICgtmaWx0ZXJfbW9kZRgDIAEoDjIuLmRlY2VudHJhbGFuZC5z",
            "ZGsuY29tcG9uZW50cy5UZXh0dXJlRmlsdGVyTW9kZUgBiAEBQgwKCl93cmFw",
            "X21vZGVCDgoMX2ZpbHRlcl9tb2RlGs4BCg1BdmF0YXJUZXh0dXJlEg8KB3Vz",
            "ZXJfaWQYASABKAkSRAoJd3JhcF9tb2RlGAIgASgOMiwuZGVjZW50cmFsYW5k",
            "LnNkay5jb21wb25lbnRzLlRleHR1cmVXcmFwTW9kZUgAiAEBEkgKC2ZpbHRl",
            "cl9tb2RlGAMgASgOMi4uZGVjZW50cmFsYW5kLnNkay5jb21wb25lbnRzLlRl",
            "eHR1cmVGaWx0ZXJNb2RlSAGIAQFCDAoKX3dyYXBfbW9kZUIOCgxfZmlsdGVy",
            "X21vZGVCCQoHdGV4dHVyZUINCgtfYWxwaGFfdGVzdEIPCg1fY2FzdF9zaGFk",
            "b3dzQhAKDl9hbHBoYV90ZXh0dXJlQhMKEV9lbWlzc2l2ZV90ZXh0dXJlQg8K",
            "DV9idW1wX3RleHR1cmVCDwoNX2FsYmVkb19jb2xvckIRCg9fZW1pc3NpdmVf",
            "Y29sb3JCFQoTX3JlZmxlY3Rpdml0eV9jb2xvckIUChJfdHJhbnNwYXJlbmN5",
            "X21vZGVCCwoJX21ldGFsbGljQgwKCl9yb3VnaG5lc3NCDQoLX2dsb3NzaW5l",
            "c3NCFQoTX3NwZWN1bGFyX2ludGVuc2l0eUIVChNfZW1pc3NpdmVfaW50ZW5z",
            "aXR5QhMKEV9kaXJlY3RfaW50ZW5zaXR5KlUKD1RleHR1cmVXcmFwTW9kZRIO",
            "CgpUV01fUkVQRUFUEAASDQoJVFdNX0NMQU1QEAESDgoKVFdNX01JUlJPUhAC",
            "EhMKD1RXTV9NSVJST1JfT05DRRADKkcKEVRleHR1cmVGaWx0ZXJNb2RlEg0K",
            "CVRGTV9QT0lOVBAAEhAKDFRGTV9CSUxJTkVBUhABEhEKDVRGTV9UUklMSU5F",
            "QVIQAiqFAQoYTWF0ZXJpYWxUcmFuc3BhcmVuY3lNb2RlEg4KCk1UTV9PUEFR",
            "VUUQABISCg5NVE1fQUxQSEFfVEVTVBABEhMKD01UTV9BTFBIQV9CTEVORBAC",
            "EiIKHk1UTV9BTFBIQV9URVNUX0FORF9BTFBIQV9CTEVORBADEgwKCE1UTV9B",
            "VVRPEARCFKoCEURDTC5FQ1NDb21wb25lbnRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DCL.ECSComponents.ColorsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DCL.ECSComponents.TextureWrapMode), typeof(global::DCL.ECSComponents.TextureFilterMode), typeof(global::DCL.ECSComponents.MaterialTransparencyMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DCL.ECSComponents.PBMaterial), global::DCL.ECSComponents.PBMaterial.Parser, new[]{ "SrcTexture", "AvatarTexture", "AlphaTest", "CastShadows", "AlphaTexture", "EmissiveTexture", "BumpTexture", "AlbedoColor", "EmissiveColor", "ReflectivityColor", "TransparencyMode", "Metallic", "Roughness", "Glossiness", "SpecularIntensity", "EmissiveIntensity", "DirectIntensity" }, new[]{ "Texture", "AlphaTest", "CastShadows", "AlphaTexture", "EmissiveTexture", "BumpTexture", "AlbedoColor", "EmissiveColor", "ReflectivityColor", "TransparencyMode", "Metallic", "Roughness", "Glossiness", "SpecularIntensity", "EmissiveIntensity", "DirectIntensity" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DCL.ECSComponents.PBMaterial.Types.Texture), global::DCL.ECSComponents.PBMaterial.Types.Texture.Parser, new[]{ "Src", "WrapMode", "FilterMode" }, new[]{ "WrapMode", "FilterMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture), global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture.Parser, new[]{ "UserId", "WrapMode", "FilterMode" }, new[]{ "WrapMode", "FilterMode" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum TextureWrapMode {
    [pbr::OriginalName("TWM_REPEAT")] TwmRepeat = 0,
    [pbr::OriginalName("TWM_CLAMP")] TwmClamp = 1,
    [pbr::OriginalName("TWM_MIRROR")] TwmMirror = 2,
    [pbr::OriginalName("TWM_MIRROR_ONCE")] TwmMirrorOnce = 3,
  }

  public enum TextureFilterMode {
    [pbr::OriginalName("TFM_POINT")] TfmPoint = 0,
    [pbr::OriginalName("TFM_BILINEAR")] TfmBilinear = 1,
    [pbr::OriginalName("TFM_TRILINEAR")] TfmTrilinear = 2,
  }

  public enum MaterialTransparencyMode {
    [pbr::OriginalName("MTM_OPAQUE")] MtmOpaque = 0,
    [pbr::OriginalName("MTM_ALPHA_TEST")] MtmAlphaTest = 1,
    [pbr::OriginalName("MTM_ALPHA_BLEND")] MtmAlphaBlend = 2,
    [pbr::OriginalName("MTM_ALPHA_TEST_AND_ALPHA_BLEND")] MtmAlphaTestAndAlphaBlend = 3,
    [pbr::OriginalName("MTM_AUTO")] MtmAuto = 4,
  }

  #endregion

  #region Messages
  public sealed partial class PBMaterial : pb::IMessage<PBMaterial>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PBMaterial> _parser = new pb::MessageParser<PBMaterial>(() => new PBMaterial());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PBMaterial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DCL.ECSComponents.MaterialReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBMaterial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBMaterial(PBMaterial other) : this() {
      _hasBits0 = other._hasBits0;
      alphaTest_ = other.alphaTest_;
      castShadows_ = other.castShadows_;
      alphaTexture_ = other.alphaTexture_ != null ? other.alphaTexture_.Clone() : null;
      emissiveTexture_ = other.emissiveTexture_ != null ? other.emissiveTexture_.Clone() : null;
      bumpTexture_ = other.bumpTexture_ != null ? other.bumpTexture_.Clone() : null;
      albedoColor_ = other.albedoColor_ != null ? other.albedoColor_.Clone() : null;
      emissiveColor_ = other.emissiveColor_ != null ? other.emissiveColor_.Clone() : null;
      reflectivityColor_ = other.reflectivityColor_ != null ? other.reflectivityColor_.Clone() : null;
      transparencyMode_ = other.transparencyMode_;
      metallic_ = other.metallic_;
      roughness_ = other.roughness_;
      glossiness_ = other.glossiness_;
      specularIntensity_ = other.specularIntensity_;
      emissiveIntensity_ = other.emissiveIntensity_;
      directIntensity_ = other.directIntensity_;
      switch (other.TextureCase) {
        case TextureOneofCase.SrcTexture:
          SrcTexture = other.SrcTexture.Clone();
          break;
        case TextureOneofCase.AvatarTexture:
          AvatarTexture = other.AvatarTexture.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBMaterial Clone() {
      return new PBMaterial(this);
    }

    /// <summary>Field number for the "src_texture" field.</summary>
    public const int SrcTextureFieldNumber = 1;
    /// <summary>
    /// default = null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.PBMaterial.Types.Texture SrcTexture {
      get { return textureCase_ == TextureOneofCase.SrcTexture ? (global::DCL.ECSComponents.PBMaterial.Types.Texture) texture_ : null; }
      set {
        texture_ = value;
        textureCase_ = value == null ? TextureOneofCase.None : TextureOneofCase.SrcTexture;
      }
    }

    /// <summary>Field number for the "avatar_texture" field.</summary>
    public const int AvatarTextureFieldNumber = 2;
    /// <summary>
    /// default = null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture AvatarTexture {
      get { return textureCase_ == TextureOneofCase.AvatarTexture ? (global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture) texture_ : null; }
      set {
        texture_ = value;
        textureCase_ = value == null ? TextureOneofCase.None : TextureOneofCase.AvatarTexture;
      }
    }

    /// <summary>Field number for the "alpha_test" field.</summary>
    public const int AlphaTestFieldNumber = 3;
    private float alphaTest_;
    /// <summary>
    /// default = 0.5. range value: from 0 to 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AlphaTest {
      get { if ((_hasBits0 & 1) != 0) { return alphaTest_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        alphaTest_ = value;
      }
    }
    /// <summary>Gets whether the "alpha_test" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlphaTest {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "alpha_test" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlphaTest() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cast_shadows" field.</summary>
    public const int CastShadowsFieldNumber = 4;
    private bool castShadows_;
    /// <summary>
    /// default =  true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CastShadows {
      get { if ((_hasBits0 & 2) != 0) { return castShadows_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        castShadows_ = value;
      }
    }
    /// <summary>Gets whether the "cast_shadows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCastShadows {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cast_shadows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCastShadows() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "alpha_texture" field.</summary>
    public const int AlphaTextureFieldNumber = 5;
    private global::DCL.ECSComponents.PBMaterial.Types.Texture alphaTexture_;
    /// <summary>
    /// default = null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.PBMaterial.Types.Texture AlphaTexture {
      get { return alphaTexture_; }
      set {
        alphaTexture_ = value;
      }
    }

    /// <summary>Field number for the "emissive_texture" field.</summary>
    public const int EmissiveTextureFieldNumber = 6;
    private global::DCL.ECSComponents.PBMaterial.Types.Texture emissiveTexture_;
    /// <summary>
    /// default = null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.PBMaterial.Types.Texture EmissiveTexture {
      get { return emissiveTexture_; }
      set {
        emissiveTexture_ = value;
      }
    }

    /// <summary>Field number for the "bump_texture" field.</summary>
    public const int BumpTextureFieldNumber = 7;
    private global::DCL.ECSComponents.PBMaterial.Types.Texture bumpTexture_;
    /// <summary>
    /// default = null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.PBMaterial.Types.Texture BumpTexture {
      get { return bumpTexture_; }
      set {
        bumpTexture_ = value;
      }
    }

    /// <summary>Field number for the "albedo_color" field.</summary>
    public const int AlbedoColorFieldNumber = 8;
    private global::DCL.ECSComponents.Color3 albedoColor_;
    /// <summary>
    /// default = white;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.Color3 AlbedoColor {
      get { return albedoColor_; }
      set {
        albedoColor_ = value;
      }
    }

    /// <summary>Field number for the "emissive_color" field.</summary>
    public const int EmissiveColorFieldNumber = 9;
    private global::DCL.ECSComponents.Color3 emissiveColor_;
    /// <summary>
    /// default = black;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.Color3 EmissiveColor {
      get { return emissiveColor_; }
      set {
        emissiveColor_ = value;
      }
    }

    /// <summary>Field number for the "reflectivity_color" field.</summary>
    public const int ReflectivityColorFieldNumber = 10;
    private global::DCL.ECSComponents.Color3 reflectivityColor_;
    /// <summary>
    /// default = white;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.Color3 ReflectivityColor {
      get { return reflectivityColor_; }
      set {
        reflectivityColor_ = value;
      }
    }

    /// <summary>Field number for the "transparency_mode" field.</summary>
    public const int TransparencyModeFieldNumber = 11;
    private global::DCL.ECSComponents.MaterialTransparencyMode transparencyMode_;
    /// <summary>
    /// default = TransparencyMode.Auto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::DCL.ECSComponents.MaterialTransparencyMode TransparencyMode {
      get { if ((_hasBits0 & 4) != 0) { return transparencyMode_; } else { return global::DCL.ECSComponents.MaterialTransparencyMode.MtmOpaque; } }
      set {
        _hasBits0 |= 4;
        transparencyMode_ = value;
      }
    }
    /// <summary>Gets whether the "transparency_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransparencyMode {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "transparency_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransparencyMode() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "metallic" field.</summary>
    public const int MetallicFieldNumber = 12;
    private float metallic_;
    /// <summary>
    /// default = 0.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Metallic {
      get { if ((_hasBits0 & 8) != 0) { return metallic_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        metallic_ = value;
      }
    }
    /// <summary>Gets whether the "metallic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMetallic {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "metallic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMetallic() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "roughness" field.</summary>
    public const int RoughnessFieldNumber = 13;
    private float roughness_;
    /// <summary>
    /// default = 0.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Roughness {
      get { if ((_hasBits0 & 16) != 0) { return roughness_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        roughness_ = value;
      }
    }
    /// <summary>Gets whether the "roughness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoughness {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "roughness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoughness() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "glossiness" field.</summary>
    public const int GlossinessFieldNumber = 14;
    private float glossiness_;
    /// <summary>
    /// default = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Glossiness {
      get { if ((_hasBits0 & 32) != 0) { return glossiness_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        glossiness_ = value;
      }
    }
    /// <summary>Gets whether the "glossiness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGlossiness {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "glossiness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGlossiness() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "specular_intensity" field.</summary>
    public const int SpecularIntensityFieldNumber = 15;
    private float specularIntensity_;
    /// <summary>
    /// default = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpecularIntensity {
      get { if ((_hasBits0 & 64) != 0) { return specularIntensity_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        specularIntensity_ = value;
      }
    }
    /// <summary>Gets whether the "specular_intensity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpecularIntensity {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "specular_intensity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpecularIntensity() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "emissive_intensity" field.</summary>
    public const int EmissiveIntensityFieldNumber = 16;
    private float emissiveIntensity_;
    /// <summary>
    /// default = 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EmissiveIntensity {
      get { if ((_hasBits0 & 128) != 0) { return emissiveIntensity_; } else { return 0F; } }
      set {
        _hasBits0 |= 128;
        emissiveIntensity_ = value;
      }
    }
    /// <summary>Gets whether the "emissive_intensity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmissiveIntensity {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "emissive_intensity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmissiveIntensity() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "direct_intensity" field.</summary>
    public const int DirectIntensityFieldNumber = 17;
    private float directIntensity_;
    /// <summary>
    /// default = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DirectIntensity {
      get { if ((_hasBits0 & 256) != 0) { return directIntensity_; } else { return 0F; } }
      set {
        _hasBits0 |= 256;
        directIntensity_ = value;
      }
    }
    /// <summary>Gets whether the "direct_intensity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDirectIntensity {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "direct_intensity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDirectIntensity() {
      _hasBits0 &= ~256;
    }

    private object texture_;
    /// <summary>Enum of possible cases for the "texture" oneof.</summary>
    public enum TextureOneofCase {
      None = 0,
      SrcTexture = 1,
      AvatarTexture = 2,
    }
    private TextureOneofCase textureCase_ = TextureOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextureOneofCase TextureCase {
      get { return textureCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTexture() {
      textureCase_ = TextureOneofCase.None;
      texture_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PBMaterial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PBMaterial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SrcTexture, other.SrcTexture)) return false;
      if (!object.Equals(AvatarTexture, other.AvatarTexture)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlphaTest, other.AlphaTest)) return false;
      if (CastShadows != other.CastShadows) return false;
      if (!object.Equals(AlphaTexture, other.AlphaTexture)) return false;
      if (!object.Equals(EmissiveTexture, other.EmissiveTexture)) return false;
      if (!object.Equals(BumpTexture, other.BumpTexture)) return false;
      if (!object.Equals(AlbedoColor, other.AlbedoColor)) return false;
      if (!object.Equals(EmissiveColor, other.EmissiveColor)) return false;
      if (!object.Equals(ReflectivityColor, other.ReflectivityColor)) return false;
      if (TransparencyMode != other.TransparencyMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Metallic, other.Metallic)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roughness, other.Roughness)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Glossiness, other.Glossiness)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpecularIntensity, other.SpecularIntensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EmissiveIntensity, other.EmissiveIntensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectIntensity, other.DirectIntensity)) return false;
      if (TextureCase != other.TextureCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (textureCase_ == TextureOneofCase.SrcTexture) hash ^= SrcTexture.GetHashCode();
      if (textureCase_ == TextureOneofCase.AvatarTexture) hash ^= AvatarTexture.GetHashCode();
      if (HasAlphaTest) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlphaTest);
      if (HasCastShadows) hash ^= CastShadows.GetHashCode();
      if (alphaTexture_ != null) hash ^= AlphaTexture.GetHashCode();
      if (emissiveTexture_ != null) hash ^= EmissiveTexture.GetHashCode();
      if (bumpTexture_ != null) hash ^= BumpTexture.GetHashCode();
      if (albedoColor_ != null) hash ^= AlbedoColor.GetHashCode();
      if (emissiveColor_ != null) hash ^= EmissiveColor.GetHashCode();
      if (reflectivityColor_ != null) hash ^= ReflectivityColor.GetHashCode();
      if (HasTransparencyMode) hash ^= TransparencyMode.GetHashCode();
      if (HasMetallic) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Metallic);
      if (HasRoughness) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roughness);
      if (HasGlossiness) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Glossiness);
      if (HasSpecularIntensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpecularIntensity);
      if (HasEmissiveIntensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EmissiveIntensity);
      if (HasDirectIntensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectIntensity);
      hash ^= (int) textureCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (textureCase_ == TextureOneofCase.SrcTexture) {
        output.WriteRawTag(10);
        output.WriteMessage(SrcTexture);
      }
      if (textureCase_ == TextureOneofCase.AvatarTexture) {
        output.WriteRawTag(18);
        output.WriteMessage(AvatarTexture);
      }
      if (HasAlphaTest) {
        output.WriteRawTag(29);
        output.WriteFloat(AlphaTest);
      }
      if (HasCastShadows) {
        output.WriteRawTag(32);
        output.WriteBool(CastShadows);
      }
      if (alphaTexture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AlphaTexture);
      }
      if (emissiveTexture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EmissiveTexture);
      }
      if (bumpTexture_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BumpTexture);
      }
      if (albedoColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AlbedoColor);
      }
      if (emissiveColor_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EmissiveColor);
      }
      if (reflectivityColor_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ReflectivityColor);
      }
      if (HasTransparencyMode) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TransparencyMode);
      }
      if (HasMetallic) {
        output.WriteRawTag(101);
        output.WriteFloat(Metallic);
      }
      if (HasRoughness) {
        output.WriteRawTag(109);
        output.WriteFloat(Roughness);
      }
      if (HasGlossiness) {
        output.WriteRawTag(117);
        output.WriteFloat(Glossiness);
      }
      if (HasSpecularIntensity) {
        output.WriteRawTag(125);
        output.WriteFloat(SpecularIntensity);
      }
      if (HasEmissiveIntensity) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(EmissiveIntensity);
      }
      if (HasDirectIntensity) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DirectIntensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (textureCase_ == TextureOneofCase.SrcTexture) {
        output.WriteRawTag(10);
        output.WriteMessage(SrcTexture);
      }
      if (textureCase_ == TextureOneofCase.AvatarTexture) {
        output.WriteRawTag(18);
        output.WriteMessage(AvatarTexture);
      }
      if (HasAlphaTest) {
        output.WriteRawTag(29);
        output.WriteFloat(AlphaTest);
      }
      if (HasCastShadows) {
        output.WriteRawTag(32);
        output.WriteBool(CastShadows);
      }
      if (alphaTexture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AlphaTexture);
      }
      if (emissiveTexture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EmissiveTexture);
      }
      if (bumpTexture_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BumpTexture);
      }
      if (albedoColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AlbedoColor);
      }
      if (emissiveColor_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EmissiveColor);
      }
      if (reflectivityColor_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ReflectivityColor);
      }
      if (HasTransparencyMode) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TransparencyMode);
      }
      if (HasMetallic) {
        output.WriteRawTag(101);
        output.WriteFloat(Metallic);
      }
      if (HasRoughness) {
        output.WriteRawTag(109);
        output.WriteFloat(Roughness);
      }
      if (HasGlossiness) {
        output.WriteRawTag(117);
        output.WriteFloat(Glossiness);
      }
      if (HasSpecularIntensity) {
        output.WriteRawTag(125);
        output.WriteFloat(SpecularIntensity);
      }
      if (HasEmissiveIntensity) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(EmissiveIntensity);
      }
      if (HasDirectIntensity) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DirectIntensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (textureCase_ == TextureOneofCase.SrcTexture) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SrcTexture);
      }
      if (textureCase_ == TextureOneofCase.AvatarTexture) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarTexture);
      }
      if (HasAlphaTest) {
        size += 1 + 4;
      }
      if (HasCastShadows) {
        size += 1 + 1;
      }
      if (alphaTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlphaTexture);
      }
      if (emissiveTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmissiveTexture);
      }
      if (bumpTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BumpTexture);
      }
      if (albedoColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlbedoColor);
      }
      if (emissiveColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmissiveColor);
      }
      if (reflectivityColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReflectivityColor);
      }
      if (HasTransparencyMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransparencyMode);
      }
      if (HasMetallic) {
        size += 1 + 4;
      }
      if (HasRoughness) {
        size += 1 + 4;
      }
      if (HasGlossiness) {
        size += 1 + 4;
      }
      if (HasSpecularIntensity) {
        size += 1 + 4;
      }
      if (HasEmissiveIntensity) {
        size += 2 + 4;
      }
      if (HasDirectIntensity) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PBMaterial other) {
      if (other == null) {
        return;
      }
      if (other.HasAlphaTest) {
        AlphaTest = other.AlphaTest;
      }
      if (other.HasCastShadows) {
        CastShadows = other.CastShadows;
      }
      if (other.alphaTexture_ != null) {
        if (alphaTexture_ == null) {
          AlphaTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
        }
        AlphaTexture.MergeFrom(other.AlphaTexture);
      }
      if (other.emissiveTexture_ != null) {
        if (emissiveTexture_ == null) {
          EmissiveTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
        }
        EmissiveTexture.MergeFrom(other.EmissiveTexture);
      }
      if (other.bumpTexture_ != null) {
        if (bumpTexture_ == null) {
          BumpTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
        }
        BumpTexture.MergeFrom(other.BumpTexture);
      }
      if (other.albedoColor_ != null) {
        if (albedoColor_ == null) {
          AlbedoColor = new global::DCL.ECSComponents.Color3();
        }
        AlbedoColor.MergeFrom(other.AlbedoColor);
      }
      if (other.emissiveColor_ != null) {
        if (emissiveColor_ == null) {
          EmissiveColor = new global::DCL.ECSComponents.Color3();
        }
        EmissiveColor.MergeFrom(other.EmissiveColor);
      }
      if (other.reflectivityColor_ != null) {
        if (reflectivityColor_ == null) {
          ReflectivityColor = new global::DCL.ECSComponents.Color3();
        }
        ReflectivityColor.MergeFrom(other.ReflectivityColor);
      }
      if (other.HasTransparencyMode) {
        TransparencyMode = other.TransparencyMode;
      }
      if (other.HasMetallic) {
        Metallic = other.Metallic;
      }
      if (other.HasRoughness) {
        Roughness = other.Roughness;
      }
      if (other.HasGlossiness) {
        Glossiness = other.Glossiness;
      }
      if (other.HasSpecularIntensity) {
        SpecularIntensity = other.SpecularIntensity;
      }
      if (other.HasEmissiveIntensity) {
        EmissiveIntensity = other.EmissiveIntensity;
      }
      if (other.HasDirectIntensity) {
        DirectIntensity = other.DirectIntensity;
      }
      switch (other.TextureCase) {
        case TextureOneofCase.SrcTexture:
          if (SrcTexture == null) {
            SrcTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
          }
          SrcTexture.MergeFrom(other.SrcTexture);
          break;
        case TextureOneofCase.AvatarTexture:
          if (AvatarTexture == null) {
            AvatarTexture = new global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture();
          }
          AvatarTexture.MergeFrom(other.AvatarTexture);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::DCL.ECSComponents.PBMaterial.Types.Texture subBuilder = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            if (textureCase_ == TextureOneofCase.SrcTexture) {
              subBuilder.MergeFrom(SrcTexture);
            }
            input.ReadMessage(subBuilder);
            SrcTexture = subBuilder;
            break;
          }
          case 18: {
            global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture subBuilder = new global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture();
            if (textureCase_ == TextureOneofCase.AvatarTexture) {
              subBuilder.MergeFrom(AvatarTexture);
            }
            input.ReadMessage(subBuilder);
            AvatarTexture = subBuilder;
            break;
          }
          case 29: {
            AlphaTest = input.ReadFloat();
            break;
          }
          case 32: {
            CastShadows = input.ReadBool();
            break;
          }
          case 42: {
            if (alphaTexture_ == null) {
              AlphaTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            }
            input.ReadMessage(AlphaTexture);
            break;
          }
          case 50: {
            if (emissiveTexture_ == null) {
              EmissiveTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            }
            input.ReadMessage(EmissiveTexture);
            break;
          }
          case 58: {
            if (bumpTexture_ == null) {
              BumpTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            }
            input.ReadMessage(BumpTexture);
            break;
          }
          case 66: {
            if (albedoColor_ == null) {
              AlbedoColor = new global::DCL.ECSComponents.Color3();
            }
            input.ReadMessage(AlbedoColor);
            break;
          }
          case 74: {
            if (emissiveColor_ == null) {
              EmissiveColor = new global::DCL.ECSComponents.Color3();
            }
            input.ReadMessage(EmissiveColor);
            break;
          }
          case 82: {
            if (reflectivityColor_ == null) {
              ReflectivityColor = new global::DCL.ECSComponents.Color3();
            }
            input.ReadMessage(ReflectivityColor);
            break;
          }
          case 88: {
            TransparencyMode = (global::DCL.ECSComponents.MaterialTransparencyMode) input.ReadEnum();
            break;
          }
          case 101: {
            Metallic = input.ReadFloat();
            break;
          }
          case 109: {
            Roughness = input.ReadFloat();
            break;
          }
          case 117: {
            Glossiness = input.ReadFloat();
            break;
          }
          case 125: {
            SpecularIntensity = input.ReadFloat();
            break;
          }
          case 133: {
            EmissiveIntensity = input.ReadFloat();
            break;
          }
          case 141: {
            DirectIntensity = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::DCL.ECSComponents.PBMaterial.Types.Texture subBuilder = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            if (textureCase_ == TextureOneofCase.SrcTexture) {
              subBuilder.MergeFrom(SrcTexture);
            }
            input.ReadMessage(subBuilder);
            SrcTexture = subBuilder;
            break;
          }
          case 18: {
            global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture subBuilder = new global::DCL.ECSComponents.PBMaterial.Types.AvatarTexture();
            if (textureCase_ == TextureOneofCase.AvatarTexture) {
              subBuilder.MergeFrom(AvatarTexture);
            }
            input.ReadMessage(subBuilder);
            AvatarTexture = subBuilder;
            break;
          }
          case 29: {
            AlphaTest = input.ReadFloat();
            break;
          }
          case 32: {
            CastShadows = input.ReadBool();
            break;
          }
          case 42: {
            if (alphaTexture_ == null) {
              AlphaTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            }
            input.ReadMessage(AlphaTexture);
            break;
          }
          case 50: {
            if (emissiveTexture_ == null) {
              EmissiveTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            }
            input.ReadMessage(EmissiveTexture);
            break;
          }
          case 58: {
            if (bumpTexture_ == null) {
              BumpTexture = new global::DCL.ECSComponents.PBMaterial.Types.Texture();
            }
            input.ReadMessage(BumpTexture);
            break;
          }
          case 66: {
            if (albedoColor_ == null) {
              AlbedoColor = new global::DCL.ECSComponents.Color3();
            }
            input.ReadMessage(AlbedoColor);
            break;
          }
          case 74: {
            if (emissiveColor_ == null) {
              EmissiveColor = new global::DCL.ECSComponents.Color3();
            }
            input.ReadMessage(EmissiveColor);
            break;
          }
          case 82: {
            if (reflectivityColor_ == null) {
              ReflectivityColor = new global::DCL.ECSComponents.Color3();
            }
            input.ReadMessage(ReflectivityColor);
            break;
          }
          case 88: {
            TransparencyMode = (global::DCL.ECSComponents.MaterialTransparencyMode) input.ReadEnum();
            break;
          }
          case 101: {
            Metallic = input.ReadFloat();
            break;
          }
          case 109: {
            Roughness = input.ReadFloat();
            break;
          }
          case 117: {
            Glossiness = input.ReadFloat();
            break;
          }
          case 125: {
            SpecularIntensity = input.ReadFloat();
            break;
          }
          case 133: {
            EmissiveIntensity = input.ReadFloat();
            break;
          }
          case 141: {
            DirectIntensity = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PBMaterial message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Texture : pb::IMessage<Texture>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Texture> _parser = new pb::MessageParser<Texture>(() => new Texture());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Texture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DCL.ECSComponents.PBMaterial.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Texture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Texture(Texture other) : this() {
          _hasBits0 = other._hasBits0;
          src_ = other.src_;
          wrapMode_ = other.wrapMode_;
          filterMode_ = other.filterMode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Texture Clone() {
          return new Texture(this);
        }

        /// <summary>Field number for the "src" field.</summary>
        public const int SrcFieldNumber = 1;
        private string src_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Src {
          get { return src_; }
          set {
            src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wrap_mode" field.</summary>
        public const int WrapModeFieldNumber = 2;
        private global::DCL.ECSComponents.TextureWrapMode wrapMode_;
        /// <summary>
        /// default = TextureWrapMode.Clamp
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::DCL.ECSComponents.TextureWrapMode WrapMode {
          get { if ((_hasBits0 & 1) != 0) { return wrapMode_; } else { return global::DCL.ECSComponents.TextureWrapMode.TwmRepeat; } }
          set {
            _hasBits0 |= 1;
            wrapMode_ = value;
          }
        }
        /// <summary>Gets whether the "wrap_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasWrapMode {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "wrap_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearWrapMode() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "filter_mode" field.</summary>
        public const int FilterModeFieldNumber = 3;
        private global::DCL.ECSComponents.TextureFilterMode filterMode_;
        /// <summary>
        /// default = FilterMode.Bilinear
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::DCL.ECSComponents.TextureFilterMode FilterMode {
          get { if ((_hasBits0 & 2) != 0) { return filterMode_; } else { return global::DCL.ECSComponents.TextureFilterMode.TfmPoint; } }
          set {
            _hasBits0 |= 2;
            filterMode_ = value;
          }
        }
        /// <summary>Gets whether the "filter_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFilterMode {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "filter_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFilterMode() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Texture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Texture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Src != other.Src) return false;
          if (WrapMode != other.WrapMode) return false;
          if (FilterMode != other.FilterMode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Src.Length != 0) hash ^= Src.GetHashCode();
          if (HasWrapMode) hash ^= WrapMode.GetHashCode();
          if (HasFilterMode) hash ^= FilterMode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Src.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Src);
          }
          if (HasWrapMode) {
            output.WriteRawTag(16);
            output.WriteEnum((int) WrapMode);
          }
          if (HasFilterMode) {
            output.WriteRawTag(24);
            output.WriteEnum((int) FilterMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Src.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Src);
          }
          if (HasWrapMode) {
            output.WriteRawTag(16);
            output.WriteEnum((int) WrapMode);
          }
          if (HasFilterMode) {
            output.WriteRawTag(24);
            output.WriteEnum((int) FilterMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Src.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Src);
          }
          if (HasWrapMode) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WrapMode);
          }
          if (HasFilterMode) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilterMode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Texture other) {
          if (other == null) {
            return;
          }
          if (other.Src.Length != 0) {
            Src = other.Src;
          }
          if (other.HasWrapMode) {
            WrapMode = other.WrapMode;
          }
          if (other.HasFilterMode) {
            FilterMode = other.FilterMode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Src = input.ReadString();
                break;
              }
              case 16: {
                WrapMode = (global::DCL.ECSComponents.TextureWrapMode) input.ReadEnum();
                break;
              }
              case 24: {
                FilterMode = (global::DCL.ECSComponents.TextureFilterMode) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Src = input.ReadString();
                break;
              }
              case 16: {
                WrapMode = (global::DCL.ECSComponents.TextureWrapMode) input.ReadEnum();
                break;
              }
              case 24: {
                FilterMode = (global::DCL.ECSComponents.TextureFilterMode) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AvatarTexture : pb::IMessage<AvatarTexture>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AvatarTexture> _parser = new pb::MessageParser<AvatarTexture>(() => new AvatarTexture());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<AvatarTexture> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DCL.ECSComponents.PBMaterial.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AvatarTexture() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AvatarTexture(AvatarTexture other) : this() {
          _hasBits0 = other._hasBits0;
          userId_ = other.userId_;
          wrapMode_ = other.wrapMode_;
          filterMode_ = other.filterMode_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public AvatarTexture Clone() {
          return new AvatarTexture(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wrap_mode" field.</summary>
        public const int WrapModeFieldNumber = 2;
        private global::DCL.ECSComponents.TextureWrapMode wrapMode_;
        /// <summary>
        /// default = TextureWrapMode.Clamp
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::DCL.ECSComponents.TextureWrapMode WrapMode {
          get { if ((_hasBits0 & 1) != 0) { return wrapMode_; } else { return global::DCL.ECSComponents.TextureWrapMode.TwmRepeat; } }
          set {
            _hasBits0 |= 1;
            wrapMode_ = value;
          }
        }
        /// <summary>Gets whether the "wrap_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasWrapMode {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "wrap_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearWrapMode() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "filter_mode" field.</summary>
        public const int FilterModeFieldNumber = 3;
        private global::DCL.ECSComponents.TextureFilterMode filterMode_;
        /// <summary>
        /// default = FilterMode.Bilinear
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::DCL.ECSComponents.TextureFilterMode FilterMode {
          get { if ((_hasBits0 & 2) != 0) { return filterMode_; } else { return global::DCL.ECSComponents.TextureFilterMode.TfmPoint; } }
          set {
            _hasBits0 |= 2;
            filterMode_ = value;
          }
        }
        /// <summary>Gets whether the "filter_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFilterMode {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "filter_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFilterMode() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as AvatarTexture);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(AvatarTexture other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (WrapMode != other.WrapMode) return false;
          if (FilterMode != other.FilterMode) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          if (HasWrapMode) hash ^= WrapMode.GetHashCode();
          if (HasFilterMode) hash ^= FilterMode.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (UserId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          if (HasWrapMode) {
            output.WriteRawTag(16);
            output.WriteEnum((int) WrapMode);
          }
          if (HasFilterMode) {
            output.WriteRawTag(24);
            output.WriteEnum((int) FilterMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (UserId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          if (HasWrapMode) {
            output.WriteRawTag(16);
            output.WriteEnum((int) WrapMode);
          }
          if (HasFilterMode) {
            output.WriteRawTag(24);
            output.WriteEnum((int) FilterMode);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          if (HasWrapMode) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WrapMode);
          }
          if (HasFilterMode) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilterMode);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(AvatarTexture other) {
          if (other == null) {
            return;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
          if (other.HasWrapMode) {
            WrapMode = other.WrapMode;
          }
          if (other.HasFilterMode) {
            FilterMode = other.FilterMode;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 16: {
                WrapMode = (global::DCL.ECSComponents.TextureWrapMode) input.ReadEnum();
                break;
              }
              case 24: {
                FilterMode = (global::DCL.ECSComponents.TextureFilterMode) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 16: {
                WrapMode = (global::DCL.ECSComponents.TextureWrapMode) input.ReadEnum();
                break;
              }
              case 24: {
                FilterMode = (global::DCL.ECSComponents.TextureFilterMode) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
