# CRDT protocol [Delay] should store the message A in all the clients
# Messages sent over the wire
{"key":"key-A","data":"casla","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"casla"}}
#
# CRDT protocol [Delay] one message with more clients (N > 2)
# Messages sent over the wire
{"key":"key-A","data":"casla","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"casla"}}
#
# CRDT protocol [Delay] should decline message A if both messages are sent at the same time and data B > data A
# Messages sent over the wire
{"key":"key-A","data":"a","timestamp":1}
{"key":"key-A","data":"z","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"z"}}
#
# CRDT protocol [Delay] B > A but with more clients (N > 2)
# Messages sent over the wire
{"key":"key-A","data":"a","timestamp":1}
{"key":"key-A","data":"b","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"b"}}
#
# CRDT protocol [Delay] should store both keys
# Messages sent over the wire
{"key":"key-A","data":"boedo","timestamp":1}
{"key":"key-B","data":"casla","timestamp":1}
{"key":"key-B","data":"a","timestamp":2}
{"key":"key-B","data":"z","timestamp":2}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"boedo"},"key-B":{"timestamp":2,"data":"z"}}
#
# CRDT protocol [Delay] should store both keys, even if we send the messages in diff order z > a
# Messages sent over the wire
{"key":"key-A","data":"boedo","timestamp":1}
{"key":"key-B","data":"casla","timestamp":1}
{"key":"key-B","data":"a","timestamp":2}
{"key":"key-B","data":"z","timestamp":2}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"boedo"},"key-B":{"timestamp":2,"data":"z"}}
#
# CRDT protocol [Delay] same as before but with more clients (N > 2)
# Messages sent over the wire
{"key":"key-A","data":"boedo","timestamp":1}
{"key":"key-B","data":"casla","timestamp":1}
{"key":"key-B","data":"a","timestamp":2}
{"key":"key-B","data":"z","timestamp":2}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"boedo"},"key-B":{"timestamp":2,"data":"z"}}
#
# CRDT protocol [Delay] A, B and C send at the same time for the same key. Bigger raw should win
# Messages sent over the wire
{"key":"key-A","data":"A","timestamp":1}
{"key":"key-A","data":"z","timestamp":1}
{"key":"key-A","data":"C","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"z"}}
#
# CRDT protocol [Delay] A sends message, B has higher timestamp.
# Messages sent over the wire
{"key":"key-A","data":"A","timestamp":1}
{"key":"key-A","data":"B","timestamp":2}
{"key":"key-A","data":"C","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":2,"data":"B"}}
#
# CRDT protocol should store the message A in all the clients
# Messages sent over the wire
{"key":"key-A","data":"casla","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"casla"}}
#
# CRDT protocol one message with more clients (N > 2)
# Messages sent over the wire
{"key":"key-A","data":"casla","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"casla"}}
#
# CRDT protocol should decline message A if both messages are sent at the same time and data B > data A
# Messages sent over the wire
{"key":"key-A","data":"a","timestamp":1}
{"key":"key-A","data":"z","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"z"}}
#
# CRDT protocol B > A but with more clients (N > 2)
# Messages sent over the wire
{"key":"key-A","data":"a","timestamp":1}
{"key":"key-A","data":"b","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"b"}}
#
# CRDT protocol should store both keys
# Messages sent over the wire
{"key":"key-A","data":"boedo","timestamp":1}
{"key":"key-B","data":"casla","timestamp":1}
{"key":"key-B","data":"a","timestamp":2}
{"key":"key-B","data":"z","timestamp":2}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"boedo"},"key-B":{"timestamp":2,"data":"z"}}
#
# CRDT protocol should store both keys, even if we send the messages in diff order z > a
# Messages sent over the wire
{"key":"key-A","data":"boedo","timestamp":1}
{"key":"key-B","data":"casla","timestamp":1}
{"key":"key-B","data":"a","timestamp":2}
{"key":"key-B","data":"z","timestamp":2}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"boedo"},"key-B":{"timestamp":2,"data":"z"}}
#
# CRDT protocol same as before but with more clients (N > 2)
# Messages sent over the wire
{"key":"key-A","data":"boedo","timestamp":1}
{"key":"key-B","data":"casla","timestamp":1}
{"key":"key-B","data":"a","timestamp":2}
{"key":"key-B","data":"z","timestamp":2}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"boedo"},"key-B":{"timestamp":2,"data":"z"}}
#
# CRDT protocol A, B and C send at the same time for the same key. Bigger raw should win
# Messages sent over the wire
{"key":"key-A","data":"A","timestamp":1}
{"key":"key-A","data":"z","timestamp":1}
{"key":"key-A","data":"C","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":1,"data":"z"}}
#
# CRDT protocol A sends message, B has higher timestamp.
# Messages sent over the wire
{"key":"key-A","data":"A","timestamp":1}
{"key":"key-A","data":"B","timestamp":2}
{"key":"key-A","data":"C","timestamp":1}
# End of messages
# Final CRDT State
{"key-A":{"timestamp":2,"data":"B"}}
#