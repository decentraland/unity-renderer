import * as path from 'path'
import { glob } from 'glob'
import {
    camelToSnakeCase,
  cleanGeneratedCode,
  execute,
  normalizePath,
  protocolPath,
  protocPath,
  workingDirectory,
} from './helpers'
import * as fs from 'node:fs'

const componentsRawInputPath = normalizePath(
  path.resolve(protocolPath, 'ecs/components/**/*.proto'),
)

const componentsPreProccessInputPath = normalizePath(
  path.resolve(__dirname, '../temp-components/'),
)

const componentsOutputPath = path.resolve(
  __dirname,
  '../../unity-renderer/Assets/DCLPlugins/ECS7/ProtocolBuffers/Generated/',
)

async function main() {
  if (!fs.existsSync(componentsPreProccessInputPath)) {
    fs.mkdirSync(componentsPreProccessInputPath)
  }
  await execute(`${protocPath} --version`, workingDirectory)

  await buildComponents()

  fs.rmSync(componentsPreProccessInputPath, { recursive: true })
}

/*
protoc
  --csharp_out "/Users/mateomiccino/decentraland/unity-renderer/unity-renderer/Assets/Scripts/MainScripts/DCL/WorldRuntime/KernelCommunication/RPC/GeneratedCode/" --csharp_opt=file_extension=.gen.cs
  --plugin=protoc-gen-dclunity=/Users/mateomiccino/decentraland/unity-renderer/unity-renderer/Assets/protoc-gen-dclunity-1.0.0-20220629020644.commit-02bd8f6/package/dist/index.js
  --dclunity_out "/Users/mateomiccino/decentraland/unity-renderer/unity-renderer/Assets/Scripts/MainScripts/DCL/WorldRuntime/KernelCommunication/RPC/GeneratedCode/" --proto_path "/Users/mateomiccino/decentraland/unity-renderer/unity-renderer/Assets/@dcl-protocol-1.0.0-2569677750.commit-6ce832a/package/renderer-protocol/" "/Users/mateomiccino/decentraland/unity-renderer/unity-renderer/Assets/@dcl-protocol-1.0.0-2569677750.commit-6ce832a/package/renderer-protocol/RendererProtocol.proto"
*/
// TODO: Builds components

const regex = new RegExp(/option *\(ecs_component_id\) *= *([0-9]+) *;/)

const getComponentId = (text: string): string | null => {
  const res = text.match(regex)
  if (res) {
    if (res.length >= 1) return res[1]
  }
  return null
}

type ComponentData = { componentName: string; componentId: number }

function generateComponentsEnum(components: ComponentData[]) {
  components.sort((first, second) => first.componentId - second.componentId)
  let content: string = ''

  content += '/* Autogenerated file, DO NOT EDIT! */\n'
  content += 'namespace DCL.ECS7\n'
  content += '{\n'
  content += '    public static class ComponentID \n'
  content += '    {\n'

  content += '        public const int TRANSFORM = 1;\n'
  for (const component of components) {
    let componentUpperCaseName = camelToSnakeCase(component.componentName).toUpperCase()

    content += `        public const int ${componentUpperCaseName} = ${component.componentId.toString()};\n`
  }
  content += '    }\n'
  content += '}\n'

  const outputPath = path.resolve(componentsOutputPath, 'ComponentID.gen.cs')
  fs.writeFileSync(outputPath, content)
}

async function preProcessComponents() {
  const protoFiles = glob.sync(componentsRawInputPath)
  const components: ComponentData[] = []

  for (const file of protoFiles) {
    const content = fs.readFileSync(file).toString()
    const lines = content.split('\n')
    const outputLines = new Array<string>()
    let newComponentId = null

    for (const line of lines) {
      const componentId = getComponentId(line)
      if (componentId) {
        newComponentId = Number(componentId)
      } else if (line.indexOf('common/id.proto') == -1) {
        outputLines.push(line)
      }
    }

    outputLines.push('package decentraland.ecs;')
    outputLines.push('option csharp_namespace = "DCL.ECSComponents";')

    const fileName = path.basename(file)
    if (newComponentId) {
      const componentName = fileName.replace('.proto', '')
      components.push({
        componentId: newComponentId,
        componentName,
      })
    }

    fs.writeFileSync(
      path.resolve(componentsPreProccessInputPath, fileName),
      outputLines.join('\n'),
    )
  }

  generateComponentsEnum(components)
}
async function buildComponents() {
  cleanGeneratedCode(componentsOutputPath)
  await preProcessComponents()
  let command = `${protocPath}`
  command += ` --csharp_out "${componentsOutputPath}"`
  command += ` --proto_path "${protocolPath}/ecs/components"`
  command += ` ${protocolPath}/ecs/components/*.proto`
  await execute(command, workingDirectory)
}

main().catch((err) => {
  console.error(err)
  process.exit(1)
})
